#include <ngx_config.h>
#include <ngx_core.h>
#include <ngx_http.h>

static ngx_int_t	ngx_http_myfilter_header_filter(ngx_http_request_t *r);
static ngx_int_t	ngx_http_myfilter_body_filter(ngx_http_request_t *r, ngx_chain_t *in);
static ngx_int_t	ngx_http_myfilter_init(ngx_conf_t *cf);
static void			* ngx_http_myfilter_create_conf(ngx_conf_t *cf);
static char			* ngx_http_myfilter_merge_loc_conf (ngx_conf_t* cf, void* parent, void* child);
// 用于管理模块参数
typedef struct
{
	ngx_flag_t enable;
}ngx_http_myfilter_conf_t;

typedef struct
{
    ngx_int_t   	add_prefix;
} ngx_http_myfilter_ctx_t;

// Http框架8个阶段的调用函数
static ngx_http_module_t 
ngx_http_myfilter_module_ctx = {
	NULL,							// 解析配置文件前调用
	ngx_http_myfilter_init,			// 把当前过滤模块插入Nginx所有过滤模块的链表中
	
	NULL,			
	NULL,
	
	NULL,
	NULL,
	
	ngx_http_myfilter_create_conf,
	ngx_http_myfilter_merge_loc_conf
};

// 模块的有关信息
static ngx_command_t ngx_http_myfilter_commands [] = {
	{ngx_string("add_prefix"),			// 模块名字
		/*模块能够出现的位置*/
		NGX_HTTP_MAIN_CONF	|
		NGX_HTTP_SRV_CONF	|
		NGX_HTTP_LOC_CONF	|
		NGX_HTTP_LMT_CONF	|
		NGX_CONF_FLAG,
		ngx_conf_set_flag_slot,				// 参数是on/off 用于打开或者关闭模块
		NGX_HTTP_LOC_CONF_OFFSET,			// 在配置文件中的偏移量
		/*参数存放在结构中的成员在结构体中的偏移量*/
		offsetof(ngx_http_myfilter_conf_t, enable),
		NULL
	},
	ngx_null_command	
};

// 模块的主要部分
ngx_module_t ngx_http_myfilter_module = {
	/*
	*ctx_index	= 0										// 本模块在本类模块中序号为0
	*index		= 0										// 本模块在所有模块中序号为0
	*spare0 	= 0, spare1 = 0, spare2 = 0, spare3 = 0	// 保留变量，设置为0		
	*version	= 0										// 模块版默认为1			
	*/
	NGX_MODULE_V1,										// 默认值
	&ngx_http_myfilter_module_ctx,						// Http框架8个阶段的调用函数
	ngx_http_myfilter_commands,							// 模块的有关信息
	NGX_HTTP_MODULE,									// 模块的类型
	NULL,												// init master
	NULL,												// init module
	NULL,												// init process
	NULL,												// init thread
	NULL,												// exit thread
	NULL,												// exit process
	NULL,												// exit master
	/*
	*spare_hook0 = 0, spare_hook1 = 0
	*spare_hook2 = 0, spare_hook3 = 0
	*spare_hook4 = 0, spare_hook5 = 0
	*spare_hook6 = 0, spare_hook7 = 0
	*/
	NGX_MODULE_V1_PADDING								// 默认值				
};
// 保留配置参数
static void * 
ngx_http_myfilter_create_conf(ngx_conf_t *cf)
{
	ngx_http_myfilter_conf_t *mycf;
	
	// 创建存储配置项的结构体
	mycf = (ngx_http_myfilter_conf_t *) ngx_pcalloc(cf->pool, 
										sizeof(ngx_http_myfilter_conf_t)
										);
	if (mycf == NULL)
	{
		return NULL;
	}
	
	// ngx_flag_t类型的变量，如果使用预设函数ngx_conf_set_flag_slot
	// 解析配置项参数，那么必须初始化为NGX_CONF_UNSET
	mycf->enable = NGX_CONF_UNSET;
	
	return mycf;
}

static char*
ngx_http_myfilter_merge_loc_conf (ngx_conf_t* cf, void* parent, void* child) 
{
	ngx_http_myfilter_conf_t *prev = (ngx_http_myfilter_conf_t *)parent;
	ngx_http_myfilter_conf_t *conf = (ngx_http_myfilter_conf_t *)child;
	
	// 合并ngx_flat_t类型的配置项 enable
	ngx_conf_merge_value(conf->enable, prev->enable, 0);
	
	return NGX_CONF_OK;
	
}



// 把当前过滤模块插入Nginx所有过滤模块的链表中
static ngx_http_output_header_filter_pt ngx_http_next_header_filter;
static ngx_http_output_body_filter_pt 	ngx_http_next_body_filter;

static ngx_int_t 
ngx_http_myfilter_init(ngx_conf_t *cf)
{
	// 插入到头部处理方法链表的首部
	ngx_http_next_header_filter = ngx_http_top_header_filter;
	ngx_http_top_header_filter = ngx_http_myfilter_header_filter;
	
	// 插入到包体处理方法链表的首部
	ngx_http_next_body_filter = ngx_http_top_body_filter;
	ngx_http_top_body_filter = ngx_http_myfilter_body_filter;
	
	return NGX_OK;
}


/*处理请求中的http头部*/
static ngx_str_t filter_prefix = ngx_string("[my filter prefix]");

static ngx_int_t
ngx_http_myfilter_header_filter(ngx_http_request_t *r)
{
		ngx_http_myfilter_ctx_t		*ctx;
		ngx_http_myfilter_conf_t	*conf;
		
		/*如果不是返回成功，那么这时是不需要理会是否加前缀的，
		直接交由下一个过滤模块处理响应非200的情况*/
		if(r->headers_out.status != NGX_HTTP_OK	)
		{
			return ngx_http_next_header_filter(r);
		}
		
		// 获取HTTP上下文
		ctx = ngx_http_get_module_ctx(r, ngx_http_myfilter_module);//???
		if (ctx)
		{
			/*该请求的上下文已经存在，这说明ngx_http_myfilter已经被调用过一次，
			直接交由下一个过滤模块处理*/
			return ngx_http_next_header_filter(r);					//???
		}
		
		
		// 获取储存配置项ngx_http_myfilter_conf_t结构体
		conf = ngx_http_get_module_loc_conf(r, ngx_http_myfilter_module);
		
		/*如果enable成员为0， 也就是配置文件中没有配置add_prefix配置项，或者
		add_prefix配置项的参数是off，那么这时直接交由下一个过滤模块处理*/
		if (conf->enable == 0)
		{
			return ngx_http_next_header_filter(r);
		}
		
		// 构造HTTP上下文结构体ngx_http_myfilter_ctx_t
		ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_myfilter_ctx_t));
		if (ctx == NULL)
		{
			return NGX_ERROR;
		}
		
		// add_prefix为0表示不加前缀
		ctx->add_prefix = 0;
		
		// 将构造的上下文设置到当前请求中
		ngx_http_set_ctx(r, ctx, ngx_http_myfilter_module);
		
		// myfilter过滤模块只处理content-type是“text/plain”类型的http响应
		if ((r->headers_out.content_type.len >= sizeof("text/plain")-1)
			&& ngx_strncasecmp(r->headers_out.content_type.data, 
								(u_char *) "text/plain", 
								sizeof("text/plain") - 1) == 0
			){
				// 设置为1表示要在http包体前加入前缀
				ctx->add_prefix = 1;													/*包体是什么?*/
				
				/*当处理模块已经在content-length中写入http包体的长度时，
				  由于我们加入了前缀字符串，所以需要把这个字符串的长度
				  也加到content-length中*/
				  if(r->headers_out.content_length_n > 0){
					  r->headers_out.content_length_n += filter_prefix.len;
				  }
			}
		// 交由下一个过滤模块继续处理
		return ngx_http_next_header_filter(r);	
}

static ngx_int_t
ngx_http_myfilter_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
	ngx_http_myfilter_ctx_t			*ctx;
	ctx = ngx_http_get_module_ctx(r, ngx_http_myfilter_module);
	
	/*如果获取不到上下文，或者上下文结构体中的add_prefix为0或者2时，
	都不会添加前缀，这时直接交给下一个http过滤模块处理*/
	if ((ctx == NULL) || (ctx->add_prefix != 1)){
		return ngx_http_next_body_filter(r, in);
	}
	
	/*将add_prefix设置为2，这样即使ngx_http_myfilter_body_filter再次回调时，
	也不会重复添加前缀*/
	ctx->add_prefix = 2;
	
	// 从请求的内存池中分配内存，用于存储字符串前缀
	ngx_buf_t *b = ngx_create_temp_buf(r->pool, filter_prefix.len);
	
	// 将ngx_buf_t中的指针正确地指向filter_prefix字符串
	b->start = b->pos = filter_prefix.data;
	b->last = b->pos + filter_prefix.len;
	
	/*从请求的内存池中生成ngx_chain_t链表，将刚分配的ngx_chain_t链表，
	将刚分配的ngx_buf_t设置到buf成员中，并将它添加到原先待发送的http包体前面*/
	ngx_chain_t *cl = ngx_alloc_chain_link(r->pool);
	cl->buf = b;
	cl->next = in;
	
	// 调用下一个模块的http包体的处理方法，注意，这时传入的是新生成的cl链表
	return ngx_http_next_body_filter(r, cl);
}

